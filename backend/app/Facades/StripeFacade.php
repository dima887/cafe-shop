<?php

namespace App\Facades;

use Stripe\Checkout\Session;
use Stripe\Event;
use Stripe\Exception\ApiErrorException;
use Stripe\Stripe;

/**
 * Facade class for working with the Stripe api
 */
class StripeFacade
{
    /**
     * Input: products
     * @var array
     */
    private array $products;
    /**
     * Input: user_id
     * @var int
     */
    private int $user_id;
    /**
     * Input: type order ID
     * @var int
     */
    private int $type_order_id;
    /**
     * Input: success url
     * @var string
     */
    private string $success_url;
    /**
     * Input: cancel url
     * @var string
     */
    private string $cancel_url;
    /**
     * Array of products created by stripe
     * @var array
     */
    private array $create_product = [];
    /**
     * Price array generated by Stripe
     * @var array
     */
    private array $create_price = [];
    /**
     * Metadata for Checkout\Session
     * @var array
     */
    private array $metadata = [];
    /**
     * Line items for Checkout\Session
     * @var array
     */
    private array $line_items = [];

    public function __construct(object $data)
    {
        Stripe::setApiKey(env('STRIPE_SECRET_KEY'));
        $this->products = $data->products;
        $this->user_id = $data->user_id;
        $this->type_order_id = $data->type_order_id;
        $this->success_url = $data->success_url;
        $this->cancel_url = $data->cancel_url;
    }

    /**
     * Get payment page url from Stripe
     *
     * @return string
     * @throws ApiErrorException
     */
    public function payment(): string
    {
        $this->createProduct();
        $this->createPrice();
        $this->createMetadata();
        $this->createLineItems();
        $checkout_session = $this->checkoutSession();

        return $checkout_session->url;
    }

    /**
     * Response Handler Stripe
     *
     * @return Event
     */
    public static function webhook(): \Stripe\Event
    {
        $payload = @file_get_contents('php://input');
        return \Stripe\Event::constructFrom(json_decode($payload, true));
    }

    /**
     * Create an array of products for Checkout\Session
     * Method calls Stripe API
     *
     * @return void
     * @throws ApiErrorException
     */
    private function createProduct(): void
    {
        foreach ($this->products['name'] as $name) {
            $this->create_product[] = \Stripe\Product::create([
                'name' => $name,
                'type' => 'service',
            ]);
        }
    }

    /**
     * Create an array of prices Checkout\Session
     * Method calls Stripe API
     *
     * @return void
     * @throws ApiErrorException
     */
    private function createPrice(): void
    {
        $indexCreateProducts = 0;
        foreach ($this->products['price'] as $price) {
            $this->create_price[] = \Stripe\Price::create([
                'unit_amount' => $price * 100,
                'currency' => 'usd',
                'product' => $this->create_product[$indexCreateProducts]->id,
            ]);
            $indexCreateProducts++;
        }
    }

    /**
     * Create metadata for Checkout\Session
     * Method calls Stripe API
     *
     * @return void
     */
    private function createMetadata(): void
    {
        $this->metadata = [
            'user_id' => $this->user_id,
            'product_id' => implode(', ', $this->products['id']),
            'type_order_id' => $this->type_order_id,
        ];
    }

    /**
     * Create line items for Checkout\Session
     *
     * @return void
     */
    private function createLineItems(): void
    {
        $indexPriceId = 0;
        foreach ($this->create_price as $price) {
            $this->line_items[$indexPriceId]['price'] = $price->id;
            $this->line_items[$indexPriceId]['quantity'] = $this->products['quantity'][$indexPriceId];
            $indexPriceId++;
        }
    }

    /**
     * Create a Checkout\Session to send to the Stripe api
     * Method calls Stripe API
     *
     * @return Session
     * @throws ApiErrorException
     */
    private function checkoutSession(): \Stripe\Checkout\Session
    {
        return \Stripe\Checkout\Session::create([
            'line_items' => [
                $this->line_items
            ],
            'metadata' => $this->metadata,
            'mode' => 'payment',
            'success_url' => $this->success_url,
            'cancel_url' => $this->cancel_url,
        ]);
    }
}
